version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: blues_dance_postgres
    environment:
      POSTGRES_DB: blues_dance_finder
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - blues_dance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d blues_dance_finder"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: blues_dance_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - blues_dance_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: blues_dance_web
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/blues_dance_finder
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=dev-secret-key-change-in-production
      - NEXTAUTH_URL=http://localhost:3000
      - NODE_ENV=development
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - blues_dance_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  blues_dance_network:
    driver: bridge